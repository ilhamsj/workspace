networks:
  universe:
    driver: bridge

services:

  strapi:
    container_name: strapi
    build:
      context: ${WORKSPACE_DIR}/strapi-project
    volumes:
      - ${WORKSPACE_DIR}/strapi-project:/usr/src/app
    environment:
      - NODE_ENV
    command: ["yarn", "dev"]
    ports:
      - 1337:1337
    networks:
      - universe

  backend:
    container_name: backend
    build:
      context: ${WORKSPACE_DIR}/backend
    volumes:
      - ${WORKSPACE_DIR}/backend:/usr/src/app
    environment:
      - NODE_ENV
    command: [ "npm", "run", "start:dev" ]
    networks:
      - universe

  rp:
    container_name: rp
    build:
      context: ./nginx/rp
      dockerfile: Dockerfile
    ports:
      - 80:80
    volumes:
      - ./nginx/rp/conf.d:/etc/nginx/conf.d
      - ./nginx/rp/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/rp/web:/etc/nginx/web
      - ./nginx/rp/includes:/etc/nginx/includes
      - ./logs/rp:/var/log/nginx
    restart: unless-stopped
    depends_on:
      - wordpress-nginx
      - frontend
      - adminer
    networks:
      - universe

  frontend:
    container_name: frontend
    build:
      context: ${WORKSPACE_DIR}/frontend
    working_dir: /usr/src/app
    volumes:
      - ${WORKSPACE_DIR}/frontend:/usr/src/app
    command: [ "npm", "run", "dev" ]
    environment:
      - NODE_ENV
    networks:
      - universe

  wordpress-nginx:
    container_name: wordpress-nginx
    build:
      context: ${WORKSPACE_DIR}/wordpress
      dockerfile: Dockerfile.nginx
    volumes:
      - ${WORKSPACE_DIR}/wordpress:/var/www
      - ./logs/wordpress-nginx:/var/log/nginx
    depends_on:
      - wordpress
    networks:
      - universe

  wordpress:
    container_name: wordpress
    build:
      context: ${WORKSPACE_DIR}/wordpress
    volumes:
      - ${WORKSPACE_DIR}/wordpress:/var/www
      - ${WORKSPACE_DIR}/wordpress-meilisearch:/var/www/public/wp-content/plugins/wordpress-meilisearch
      - ./logs/wordpress/debug.log:/var/www/public/wp-content/debug.log
      - ./logs/wordpress/monolog:/var/log/wordpress
    environment:
      - DB_NAME=${MYSQL_DATABASE}
      - DB_USER=${MYSQL_USER}
      - DB_PASSWORD=${MYSQL_PASSWORD}
      - DB_HOST=${MYSQL_HOST}
    depends_on:
      - mysql
    networks:
      - universe

  wordpress-cron:
    container_name: wordpress-cron
    build:
      context: ./cron
    depends_on:
      - wordpress
      - wordpress-nginx
    networks:
      - universe

  mysql:
    container_name: mysql
    image: mysql:8.0
    volumes:
      - ./data/mysql:/var/lib/mysql
      - ./logs/mysql:/var/log/mysql
      - ./mysql/my.cnf:/etc/mysql/conf.d/my.cnf
      - ./mysql/sql:/docker-entrypoint-initdb.d
    environment:
      - MYSQL_ROOT_PASSWORD
      - MYSQL_DATABASE
      - MYSQL_USER
      - MYSQL_PASSWORD
    networks:
      - universe

  adminer:
    image: adminer:latest
    container_name: adminer
    restart: unless-stopped
    networks:
      - universe
    depends_on:
      - mysql

  meilisearch:
    container_name: meilisearch
    image: getmeili/meilisearch:v1.12
    environment:
      - MEILI_MASTER_KEY
    ports:
      - "7700:7700"
    networks:
      - universe
    volumes:
      - ./data/meilisearch:/meili_data

  minio:
    container_name: minio
    image: quay.io/minio/minio
    environment:
      - MINIO_ROOT_USER
      - MINIO_ROOT_PASSWORD
    ports:
      - 9000:9000
      - 9001:9001
    command: server /data --console-address ":9001"
    networks:
      - universe
    volumes:
      - ./data/minio:/data

  postgres:
    container_name: postgres
    build:
      context: ./postgres
    environment:
      - POSTGRES_USER
      - POSTGRES_PASSWORD
      - POSTGRES_DB
    volumes:
      - ./data/postgres:/var/lib/postgresql/data
    networks:
      - universe

  n8n:
    image: docker.n8n.io/n8nio/n8n
    container_name: n8n
    restart: always
    environment:
      - DB_TYPE=postgresdb
      - DB_POSTGRESDB_HOST=postgres
      - DB_POSTGRESDB_PORT=5432
      - DB_POSTGRESDB_DATABASE=${POSTGRES_DB}
      - DB_POSTGRESDB_USER=${POSTGRES_USER}
      - DB_POSTGRESDB_PASSWORD=${POSTGRES_PASSWORD}
      - N8N_HOST=local.wordpress.test
      - N8N_PORT=80
      - N8N_PROTOCOL=http
      - N8N_PATH=/n8n/
      - N8N_TRUST_PROXY=true
      - N8N_SECURE_COOKIE=${N8N_SECURE_COOKIE}
    volumes:
      - ./data/n8n:/home/node/.n8n
    networks:
      - universe
    depends_on:
      - postgres
