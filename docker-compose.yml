networks:
  universe:
    driver: bridge

services:
  rp:
    container_name: rp
    image: nginx:latest
    ports:
      - 80:80
    volumes:
      - ./nginx/rp/conf.d/default.conf:/etc/nginx/conf.d/default.conf
      - ./nginx/rp/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/rp/web:/etc/nginx/web
      - ./logs/rp:/var/log/nginx
    restart: unless-stopped
    depends_on:
      - wordpress-nginx
      - frontend
      - adminer
    networks:
      - universe

  frontend:
    container_name: frontend
    build:
      context: ${WORKSPACE_DIR}/frontend
    working_dir: /usr/src/app
    volumes:
      - ${WORKSPACE_DIR}/frontend:/usr/src/app
    command: [ "npm", "run", "dev" ]
    environment:
      - NODE_ENV
    networks:
      - universe

  wordpress-nginx:
    container_name: wordpress-nginx
    image: nginx:latest
    volumes:
      - ${WORKSPACE_DIR}/wordpress:/var/www
      - ./nginx/wordpress/default.conf:/etc/nginx/conf.d/default.conf
      - ./nginx/wordpress/nginx.conf:/etc/nginx/nginx.conf
      - ./logs/wordpress-nginx:/var/log/nginx
    depends_on:
      - wordpress
    networks:
      - universe
    extra_hosts:
      - "local.wordpress.test:${HOST_IP}"

  wordpress:
    container_name: wordpress
    build:
      context: ${WORKSPACE_DIR}/wordpress
    volumes:
      - ${WORKSPACE_DIR}/wordpress-custom-plugin:/var/www/public/wp-content/plugins/wordpress-custom-plugin
      - ${WORKSPACE_DIR}/wordpress-custom-theme:/var/www/public/wp-content/themes/wordpress-custom-theme
      - ${WORKSPACE_DIR}/wordpress:/var/www:cached
      - ./logs/wordpress/debug.log:/var/www/public/wp-content/debug.log
    environment:
      - DB_NAME=${MYSQL_DATABASE}
      - DB_USER=${MYSQL_USER}
      - DB_PASSWORD=${MYSQL_PASSWORD}
      - DB_HOST=${MYSQL_HOST}
    depends_on:
      - mysql
    networks:
      - universe

  mysql:
    container_name: mysql
    image: mysql:8.0
    volumes:
      - ./data/mysql:/var/lib/mysql
      - ./logs/mysql:/var/log/mysql
      - ./mysql/my.cnf:/etc/mysql/conf.d/my.cnf
      - ./mysql/sql:/docker-entrypoint-initdb.d
    environment:
      - MYSQL_ROOT_PASSWORD
      - MYSQL_DATABASE
      - MYSQL_USER
      - MYSQL_PASSWORD
    networks:
      - universe

  adminer:
    image: adminer:latest
    container_name: adminer
    restart: unless-stopped
    networks:
      - universe
    depends_on:
      - mysql
